
const express = require('express');
const multer = require('multer');
const ftp = require('basic-ftp');
const mongoose = require('mongoose');
const FolderModel = require('../model/File'); 
const UserModel = require('../model/users'); 
const { Readable } = require('stream');
require('dotenv').config(); 

const app = express();

// Mongo URI from environment variables
const mongoURI = process.env.MONGODB_URI;

// Connect to MongoDB
mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected successfully.'))
  .catch((err) => console.error('MongoDB connection error:', err));

// Multer configuration
const storage = multer.memoryStorage();
const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    // List of accepted MIME types
    const acceptedMimeTypes = [
      'application/pdf',
      'application/msword', // .doc
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // .docx
      'application/vnd.ms-excel', // .xls
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
      'image/jpeg', // .jpg, .jpeg
      'image/png', // .png
      'image/gif' // .gif
    ];

    if (!acceptedMimeTypes.includes(file.mimetype)) {
      cb(new Error(`${file.originalname} is invalid. Only accept PDF, Word, Excel, and image files.`), false);
    } else {
      cb(null, true);
    }
  }
}).any(); // Accept any files including those inside the folder

// Define FTP credentials for each department
const ftpCredentials = {
  finance: {
    host: process.env.FTP_HOST_FINANCE,
    user: process.env.FTP_USER_FINANCE,
    password: process.env.FTP_PASSWORD_FINANCE,
  },
  underwriting: {
    host: process.env.FTP_HOST_UNDERWRITING,
    user: process.env.FTP_USER_UNDERWRITING,
    password: process.env.FTP_PASSWORD_UNDERWRITING,
  },
  loan: {
    host: process.env.FTP_HOST_LOAN,
    user: process.env.FTP_USER_LOAN,
    password: process.env.FTP_PASSWORD_LOAN,
  },
  ppf_gf: {
    host: process.env.FTP_HOST_PPF_GF,
    user: process.env.FTP_USER_PPF_GF,
    password: process.env.FTP_PASSWORD_PPF_GF,
  }
};

const uploadFileToFTP = async (fileStream, remoteFileName, department) => {
  const client = new ftp.Client();
  try {
    const credentials = ftpCredentials[department];

    await client.access(credentials);

    const remoteDir = remoteFileName.substring(0, remoteFileName.lastIndexOf('/'));

    // Ensure the directory exists
    await client.ensureDir(remoteDir);
    await client.uploadFrom(fileStream, remoteFileName);

    console.log(`File uploaded to ${remoteFileName}`);
    return `File uploaded to ${remoteFileName}`;
  } catch (err) {
    console.error(`Failed to upload ${remoteFileName}:`, err);
    throw new Error(`Failed to upload ${remoteFileName}`);
  } finally {
    client.close();
  }
};

const handleFileUpload = async (req, res) => {
  try {
    upload(req, res, async (err) => {
      if (err) {
        console.error('Multer error:', err);
        req.flash('error', `Error uploading files: ${err.message}`);
        return res.redirect('/upload');
      }

      const uploadType = req.body.uploadType;

      if (!uploadType) {
        req.flash('error', 'Upload type is missing.');
        return res.redirect('/upload');
      }

      const userId = req.session.userId;
      const user = await UserModel.findById(userId); 
      if (!user) {
        req.flash('error', 'User not found.');
        return res.redirect('/upload');
      }

      const department = user.department;
      let folder = '';

      switch (department) {
        case 'finance':
          folder = 'finance';
          break;
        case 'underwriting':
          folder = 'underwriting';
          break;
        case 'loan':
          folder = 'loan';
          break;
        case 'ppf_gf':
          folder = 'ppf_gf';
          break;
        default:
          folder = 'default';
          break;
      }

      const processFolder = async (files, parentPath, folderName) => {
        if (!files || files.length === 0) {
          throw new Error('No files to process.');
        }

        const fileData = [];

        for (const file of files) {
          const remoteFileName = `${parentPath}/${file.originalname}`;
          try {
            const fileStream = Readable.from(file.buffer);
            await uploadFileToFTP(fileStream, remoteFileName, department);

            fileData.push({
              originalname: file.originalname,
              mimetype: file.mimetype,
              size: file.size,
              path: remoteFileName,
              uploadedBy:userId
            });
          } catch (err) {
            req.flash('error', `Qnap Device is down, Contact IT Administrator`);
            throw new Error(`Failed to upload ${file.originalname}`);
          }
        }

        const folderData = {
          folderName,
          uploadType,
          uploadedBy: userId,
          files: fileData
        }; 

        await FolderModel.create(folderData);
      };

      if (uploadType === 'Folder') {
        const folderName = req.body.folderName;
        const folderPath = `/${folder}/${folderName}`;
        const files = req.files;
        console.log(folderPath);
        
        console.log(files);
        await processFolder(files, folderPath, folderName);
        req.flash('success', 'Folder uploaded successfully!');
      } else {
        const files = req.files;
        console.log(files);
        await processFolder(files, `/${folder}`, ''); // Empty string for folder name if it's not a folder upload
        req.flash('success', 'Files uploaded successfully!');
      }

      res.redirect('/');
    });
  } catch (err) {
    console.error(err);
    req.flash('error', 'Failed to upload files to FTP server.');
    res.redirect('/Uploads');
  }
};


module.exports = handleFileUpload;

simple code 2
const ftpCredentials = {
  qnap1: {
    finance: {
      host: process.env.FTP_HOST_FINANCE,
      user: process.env.FTP_USER_FINANCE,
      password: process.env.FTP_PASSWORD_FINANCE,
    },
  },
  qnap2: {
    underwriting: {
      host: process.env.FTP_HOST_UNDERWRITING,
      user: process.env.FTP_USER_UNDERWRITING,
      password: process.env.FTP_PASSWORD_UNDERWRITING,
    },
  },
  qnap3: {
    loan: {
      host: process.env.FTP_HOST_LOAN,
      user: process.env.FTP_USER_LOAN,
      password: process.env.FTP_PASSWORD_LOAN,
    },
    ppf_gf: {
      host: process.env.FTP_HOST_PPF_GF,
      user: process.env.FTP_USER_PPF_GF,
      password: process.env.FTP_PASSWORD_PPF_GF,
    },
  }
};
 simple Code 3
 const express = require('express');
const multer = require('multer');
const ftp = require('basic-ftp');
const mongoose = require('mongoose');
const FolderModel = require('../model/File');
const UserModel = require('../model/users');
const { Readable } = require('stream');
require('dotenv').config();

const app = express();

// MongoDB Connection
const mongoURI = process.env.MONGODB_URI;
mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected successfully.'))
  .catch((err) => console.error('MongoDB connection error:', err));

// Multer Configuration (for memory storage)
const storage = multer.memoryStorage();
const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    const acceptedMimeTypes = [
      'application/pdf', 'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'image/jpeg', 'image/png', 'image/gif'
    ];

    if (!acceptedMimeTypes.includes(file.mimetype)) {
      cb(new Error(`${file.originalname} is invalid. Only accept PDF, Word, Excel, and image files.`), false);
    } else {
      cb(null, true);
    }
  }
}).any(); // Accept multiple files

// Define FTP Credentials for the Insurance Department
const ftpCredentials = {
  qnap1: {
    finance: {
      host: process.env.FTP_HOST_FINANCE,
      user: process.env.FTP_USER_FINANCE,
      password: process.env.FTP_PASSWORD_FINANCE,
    },
  },
  qnap2: {
    underwriting: {
      host: process.env.FTP_HOST_UNDERWRITING,
      user: process.env.FTP_USER_UNDERWRITING,
      password: process.env.FTP_PASSWORD_UNDERWRITING,
    },
  },
  qnap3: {
    loan: {
      host: process.env.FTP_HOST_LOAN,
      user: process.env.FTP_USER_LOAN,
      password: process.env.FTP_PASSWORD_LOAN,
    },
    ppf_gf: {
      host: process.env.FTP_HOST_PPF_GF,
      user: process.env.FTP_USER_PPF_GF,
      password: process.env.FTP_PASSWORD_PPF_GF,
    },
  }
};

// Function to Get FTP Credentials for Insurance
const getInsuranceQnapCredentials = () => {
  return ftpCredentials.qnap2;
};

// Function to Check and Create Section Folder for Insurance Department
const checkAndCreateSectionFolder = async (section) => {
  const client = new ftp.Client();
  
  try {
    // Step 1: Get FTP credentials for insurance department
    const insuranceServer = getInsuranceQnapCredentials();
    
    // Step 2: Connect to the FTP server
    await client.access(insuranceServer);
    
    // Step 3: Define root folder for insurance department
    const insuranceRoot = '/underwriting';
    
    // Step 4: Define the section folder path (e.g., /insurance/underwriting)
    const sectionPath = `${insuranceRoot}/${section}`;
    
    // Step 5: Check if the section folder exists
    console.log(`Checking if section folder exists: ${sectionPath}`);
    
    try {
      // Try to change to the section directory
      await client.cd(sectionPath);
      console.log(`üìÅ Folder already exists: ${sectionPath}`);
    } catch (err) {
      if (err.code === 550) {
        // Folder does not exist, so create it
        console.log(`‚ùå Folder does not exist. Creating folder: ${sectionPath}`);
        await client.ensureDir(sectionPath);
        console.log(`‚úÖ Folder created: ${sectionPath}`);
      } else {
        throw err; // Throw if error is not 550 (directory does not exist)
      }
    }

    // Step 6: Return the path of the section folder for file upload
    return sectionPath;

  } catch (err) {
    console.error(`‚ùå Failed to create or find section folder: ${err}`);
    throw new Error(`Failed to create or find section folder: ${err}`);
  } finally {
    // Always close the FTP client
    client.close();
  }
};

// Function to Upload Files to FTP (Insurance QNAP)
const uploadFileToFTP = async (fileStream, remoteFileName, section) => {
  const client = new ftp.Client();
  try {
    // Step 1: Check and create section folder if needed
    const sectionPath = await checkAndCreateSectionFolder(section);

    // Step 2: Upload the file to the section folder
    const insuranceServer = getInsuranceQnapCredentials();
    await client.access(insuranceServer);
    
    // Full path for the remote file to upload
    const fullRemotePath = `${sectionPath}/${remoteFileName}`;

    // Upload the file
    await client.uploadFrom(fileStream, fullRemotePath);
    console.log(`‚úÖ File uploaded successfully to: ${fullRemotePath}`);

  } catch (err) {
    console.error(`‚ùå Failed to upload file: ${err}`);
    throw new Error(`Failed to upload file: ${err}`);
  } finally {
    // Always close the FTP client
    client.close();
  }
};

// Handle File Upload
const handleFileUpload = async (req, res) => {
  try {
    upload(req, res, async (err) => {
      if (err) {
        console.error('‚ùå Multer error:', err);
        req.flash('error', `Error uploading files: ${err.message}`);
        return res.redirect('/upload');
      }

      const uploadType = req.body.uploadType;
      if (!uploadType) {
        req.flash('error', 'Upload type is missing.');
        return res.redirect('/upload');
      }

      // Fetch User Details
      const userId = req.session.userId;
      const user = await UserModel.findById(userId);
      if (!user) {
        req.flash('error', 'User not found.');
        return res.redirect('/upload');
      }

      const department = user.department;
      const section = req.body.section; // Use section from form input (underwriting, claims, etc.)

      // Process Folder and Upload Files
      const processFolder = async (files, parentPath, folderName) => {
        if (!files || files.length === 0) throw new Error('No files to process.');

        const fileData = [];

        for (const file of files) {
          const remoteFileName = `${parentPath}/${file.originalname}`;
          try {
            const fileStream = Readable.from(file.buffer);
            await uploadFileToFTP(fileStream, remoteFileName, section); // Upload to correct section of insurance department

            fileData.push({
              originalname: file.originalname,
              mimetype: file.mimetype,
              size: file.size,
              path: remoteFileName,
              uploadedBy: userId
            });
          } catch (err) {
            req.flash('error', `QNAP Device is down, Contact IT Administrator`);
            throw new Error(`Failed to upload ${file.originalname}`);
          }
        }

        // Save Folder & File Data to MongoDB
        const folderData = {
          folderName,
          uploadType,
          uploadedBy: userId,
          files: fileData
        };

        await FolderModel.create(folderData);
      };

      // Upload Folder or Individual Files
      if (uploadType === 'Folder') {
        const folderName = req.body.folderName;
        const folderPath = `/insurance/${folderName}`;
        const files = req.files;

        console.log(`üìÅ Uploading folder to: ${folderPath}`);
        console.log(files);
        await processFolder(files, folderPath, folderName);
        req.flash('success', 'Folder uploaded successfully!');
      } else {
        const files = req.files;
        console.log(`üìÑ Uploading files to: /insurance/${section}`);
        console.log(files);
        await processFolder(files, `/insurance/${section}`, '');
        req.flash('success', 'Files uploaded successfully!');
      }

      res.redirect('/');
    });
  } catch (err) {
    console.error(err);
    req.flash('error', 'Failed to upload files to FTP server.');
    res.redirect('/Uploads');
  }
};

module.exports = handleFileUpload;



<%- include("./Layouts/header", { user: user }) %>

<div class="page-content">
  <div class="container-fluid">
    <!-- Toast Container - Responsive positioning -->
    <div aria-live="polite" aria-atomic="true" class="position-relative">
      <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
        <% if (messages.success) { %>
        <div class="toast align-items-center text-white bg-success border-0 show" role="alert">
          <div class="d-flex">
            <div class="toast-body">
              <%= messages.success %>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
          </div>
        </div>
        <% } %>

        <% if (messages.error) { %>
        <div class="toast align-items-center text-white bg-danger border-0 show" role="alert">
          <div class="d-flex">
            <div class="toast-body">
              <%= messages.error %>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
          </div>
        </div>
        <% } %>
      </div>
    </div>

    <!-- Page Header - Responsive -->
    <div class="row">
      <div class="col-12">
        <div class="page-title-box">
          <h4 class="mb-0 fw-semibold">All Files & Folders List</h4>
          <ol class="breadcrumb mb-0">
            <li class="breadcrumb-item"><a href="javascript:void(0);">DMS</a></li>
            <li class="breadcrumb-item active">Files & Folder List</li>
          </ol>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-body">
            <!-- Search and Upload Section - Responsive -->
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-stretch align-items-md-center gap-3 mb-3">
              <div class="search-bar flex-grow-1 flex-md-grow-0" style="max-width: 400px;">
                <div class="position-relative">
                  <span class="position-absolute top-50 start-0 translate-middle-y ps-3">
                    <i class="bx bx-search-alt"></i>
                  </span>
                  <input type="search" class="form-control ps-5" id="search" placeholder="Search files & folders...">
                </div>
              </div>
              <div class="dropdown">
                <button type="button" class="btn btn-sm btn-primary dropdown-toggle w-100 w-md-auto" onclick="toggleDropdown('filterDropdown')">
                  Upload New
                </button>
                <div class="dropdown-menu dropdown-menu-end" id="filterDropdown">
                  <a class="dropdown-item" id="uploadFolder" href="#">
                    <i class="bx bx-folder-plus me-2"></i>Folder
                  </a>
                  <a class="dropdown-item" id="uploadFiles" href="#">
                    <i class="bx bx-file-plus me-2"></i>Files
                  </a>
                </div>
              </div>
            </div>

            <!-- Search Results -->
            <div id="searchResults" class="mt-3"></div>

            <!-- Table - Responsive -->
            <div class="table-responsive">
              <table class="table align-middle mb-0 table-hover table-centered">
                <thead class="bg-light-subtle">
                  <tr>
                    <th class="d-none d-md-table-cell">SI No.</th>
                    <th>File/Folder Name</th>
                    <th class="d-none d-lg-table-cell">Upload Date</th>
                    <th class="d-none d-xl-table-cell">Uploaded By</th>
                    <th class="d-none d-lg-table-cell">File Size / File Count</th>
                    <th class="d-none d-xl-table-cell">Department</th>
                    <th class="d-none d-md-table-cell">Sharing</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody>
                  <% if (folder && folder.length > 0) { %>
                  <% let si = 1; %>
                  <% folder.forEach(item => { %>
                  <% if (item.uploadType === 'Folder') { %>
                  <tr class="folder-row">
                    <td class="d-none d-md-table-cell"><%= si++ %></td>
                    <td>
                      <div class="d-flex align-items-center">
                        <i class="me-2">
                          <iconify-icon icon="solar:folder-with-files-outline"></iconify-icon>
                        </i>
                        <div>
                          <a href="/folder/<%= item._id %>" class="text-decoration-none">
                            <%= item.folderName || 'Unnamed Folder' %>
                          </a>
                          <!-- Mobile-only info -->
                          <div class="d-md-none">
                            <small class="text-muted d-block">
                              <%= new Intl.DateTimeFormat('en-US', { dateStyle: 'short' }).format(new Date(item.date)) %>
                            </small>
                            <small class="text-muted">
                              <%= item.files?.length || 0 %> files ‚Ä¢ <%= item.uploadedBy?.name || 'Unknown' %>
                            </small>
                          </div>
                        </div>
                      </div>
                    </td>
                    <td class="d-none d-lg-table-cell">
                      <%= new Intl.DateTimeFormat('en-US', { dateStyle: 'medium', timeStyle: 'short' }).format(new Date(item.date)) %>
                    </td>
                    <td class="d-none d-xl-table-cell"><%= item.uploadedBy?.name || 'Unknown' %></td>
                    <td class="d-none d-lg-table-cell"><%= item.files?.length || 0 %> files</td>
                    <td class="d-none d-xl-table-cell"><%= item.uploadedBy?.department || 'Unknown' %></td>
                    <td class="d-none d-md-table-cell">
                      <% if (item.sharedWith && item.sharedWith.length > 0) { %>
                      <iconify-icon icon="f7:person-2" class="align-middle fs-18"></iconify-icon>
                      <a href="#!" onclick="openStopShareModel('<%= item._id %>', 'folder', '<%= item.folderName %>')">Sharing</a>
                      <% } else { %>
                      <iconify-icon icon="mdi-light:eye-off" class="align-middle fs-18"></iconify-icon>
                      Private
                      <% } %>
                    </td>
                    <td>
                      <div class="d-flex gap-1">
                        <a href="/folder/<%= item._id %>" class="btn btn-soft-secondary btn-sm">
                          <iconify-icon icon="fluent:open-32-filled" class="align-middle fs-18"></iconify-icon>
                        </a>
                        <button type="button" class="btn btn-soft-primary btn-sm open-share-modal" 
                                data-id="<%= item._id %>" 
                                data-type="folder" 
                                data-name="<%= item.folderName || 'Unnamed Folder' %>">
                          <iconify-icon icon="majesticons:share-line" class="align-middle fs-18"></iconify-icon>
                        </button>
                      </div>
                    </td>
                  </tr>
                  <% } %>

                  <% if (item.uploadType === 'Files' && item.files && item.files.length > 0) { %>
                  <% item.files.forEach(file => { %>
                  <tr class="file-row">
                    <td class="d-none d-md-table-cell"><%= si++ %></td>
                    <td>
                      <div class="d-flex align-items-center">
                        <i class="me-2">
                          <iconify-icon icon="<%= getFileIcon(file.originalname) %>"></iconify-icon>
                        </i>
                        <div>
                          <a href="/view/<%= file._id %>" target="_blank" rel="noopener noreferrer" class="text-decoration-none">
                            <%= file.originalname %>
                          </a>
                          <!-- Mobile-only info -->
                          <div class="d-md-none">
                            <small class="text-muted d-block">
                              <%= new Intl.DateTimeFormat('en-US', { dateStyle: 'short' }).format(new Date(file.date)) %>
                            </small>
                            <small class="text-muted">
                              <%= formatFileSize(file.size) %> ‚Ä¢ <%= file.uploadedBy?.name || 'Unknown' %>
                            </small>
                          </div>
                        </div>
                      </div>
                    </td>
                    <td class="d-none d-lg-table-cell">
                      <%= new Intl.DateTimeFormat('en-US', { dateStyle: 'medium', timeStyle: 'short' }).format(new Date(file.date)) %>
                    </td>
                    <td class="d-none d-xl-table-cell"><%= file.uploadedBy?.name || 'Unknown' %></td>
                    <td class="d-none d-lg-table-cell"><%= formatFileSize(file.size) %></td>
                    <td class="d-none d-xl-table-cell"><%= file.uploadedBy?.department || 'Unknown' %></td>
                    <td class="d-none d-md-table-cell">
                      <% if (file.sharedWith && file.sharedWith.length > 0) { %>
                      <iconify-icon icon="f7:person-2" class="align-middle fs-18"></iconify-icon>
                      <a href="#!" onclick="openStopShareModel('<%= file._id %>', 'file', '<%= file.originalname %>')">Sharing</a>
                      <% } else { %>
                      <iconify-icon icon="mdi-light:eye-off" class="align-middle fs-18"></iconify-icon>
                      Private
                      <% } %>
                    </td>
                    <td>
                      <div class="d-flex gap-1">
                        <a href="/view/<%= file._id %>" class="btn btn-soft-secondary btn-sm">
                          <iconify-icon icon="fluent:open-32-filled" class="align-middle fs-18"></iconify-icon>
                        </a>
                        <button type="button" class="btn btn-soft-primary btn-sm open-share-modal" 
                                data-id="<%= file._id %>" 
                                data-type="file" 
                                data-name="<%= file.originalname %>">
                          <iconify-icon icon="majesticons:share-line" class="align-middle fs-18"></iconify-icon>
                        </button>
                      </div>
                    </td>
                  </tr>
                  <% }) %>
                  <% } %>
                  <% }) %>
                  <% } else { %>
                  <tr id="noResultsRow">
                    <td colspan="8" class="text-center py-4">No folders or files found.</td>
                  </tr>
                  <% } %>
                </tbody>
                <tr id="noResultsRow" class="d-none">
                  <td colspan="8" class="text-center py-4">No folders or files found.</td>
                </tr>
              </table>
            </div>

            <!-- Pagination - Responsive -->
            <div class="card-footer border-top">
              <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center justify-content-md-end mb-0 flex-wrap">
                  <li class="page-item">
                    <a class="page-link" href="javascript:void(0);">
                      <span class="d-none d-sm-inline">Previous</span>
                      <span class="d-sm-none">&laquo;</span>
                    </a>
                  </li>
                  <li class="page-item active"><a class="page-link" href="javascript:void(0);">1</a></li>
                  <li class="page-item"><a class="page-link" href="javascript:void(0);">2</a></li>
                  <li class="page-item"><a class="page-link" href="javascript:void(0);">3</a></li>
                  <li class="page-item">
                    <a class="page-link" href="javascript:void(0);">
                      <span class="d-none d-sm-inline">Next</span>
                      <span class="d-sm-none">&raquo;</span>
                    </a>
                  </li>
                </ul>
              </nav>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Share Modal - Responsive -->
  <div id="shareModal" class="modal fade" tabindex="-1" aria-labelledby="shareModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg">
      <form id="shareForm" method="POST" action="/folder/share">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="shareModalLabel">Share <span id="shareItemTypeText"></span></h5>
            <button type="button" class="btn-close" aria-label="Close" id="shareModalClose"></button>
          </div>

          <div class="modal-body">
            <input type="hidden" name="id" id="shareItemId" value="" />
            <input type="hidden" name="type" id="shareItemType" value="" />
            <input type="hidden" name="redirectUrl" id="redirectUrlInput" value="" />

            <!-- Responsive Tabs -->
            <ul class="nav nav-tabs nav-justified" id="shareTabs" role="tablist">
              <li class="nav-item" role="presentation">
                <button class="nav-link active" id="individual-tab" data-bs-toggle="tab" data-bs-target="#individual" type="button" role="tab" aria-controls="individual" aria-selected="true">
                  <i class="bx bx-user me-1"></i>
                  <span class="d-none d-sm-inline">Individual</span>
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="group-tab" data-bs-toggle="tab" data-bs-target="#group" type="button" role="tab" aria-controls="group" aria-selected="false">
                  <i class="bx bx-group me-1"></i>
                  <span class="d-none d-sm-inline">Group</span>
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="all-tab" data-bs-toggle="tab" data-bs-target="#all" type="button" role="tab" aria-controls="all" aria-selected="false">
                  <i class="bx bx-globe me-1"></i>
                  <span class="d-none d-sm-inline">All</span>
                </button>
              </li>
            </ul>

            <div class="tab-content mt-3" id="shareTabsContent">
              <!-- Individual Share Tab -->
              <div class="tab-pane fade show active" id="individual" role="tabpanel" aria-labelledby="individual-tab">
                <div class="mb-3">
                  <label for="shareWithUserId" class="form-label">Share With User</label>
                  <select name="shareWithUserId" id="shareWithUserId" class="form-select" required>
                    <% (allUsers || []).forEach(function(u) { %>
                    <option value="<%= u._id %>"><%= u.name %> - <%= u.department %></option>
                    <% }) %>
                  </select>
                </div>
              </div>

              <!-- Group Share Tab -->
              <div class="tab-pane fade" id="group" role="tabpanel" aria-labelledby="group-tab">
                <div class="mb-3">
                  <label for="shareWithGroupId" class="form-label">Share With Group</label>
                  <select name="shareWithGroupId" id="shareWithGroupId" class="form-select">
                    <% (allgroups || []).forEach(function(g) { %>
                    <option value="<%= g._id %>"><%= g.groupName %></option>
                    <% }) %>
                  </select>
                </div>
              </div>

              <!-- All Share Tab -->
              <div class="tab-pane fade" id="all" role="tabpanel" aria-labelledby="all-tab">
                <div class="form-check mt-3">
                  <input class="form-check-input" type="checkbox" id="shareToAll" name="shareToAll" value="true" />
                  <label class="form-check-label" for="shareToAll">
                    Share with all users
                  </label>
                </div>
              </div>
            </div>

            <div class="mb-3">
              <label for="access" class="form-label">Access Level</label>
              <select name="access" id="access" class="form-select" required onchange="updateAccessNote()">
                <option value="read">View</option>
                <option value="NoDownload">Can't Download</option>
              </select>
              <span id="access-note" class="form-text text-muted d-block mt-1">
                Can view and download.
              </span>
            </div>
          </div>

          <div class="modal-footer flex-column flex-sm-row">
            <button type="submit" class="btn btn-primary w-100 w-sm-auto mb-2 mb-sm-0 me-sm-2">
              <i class="bx bx-share-alt me-1"></i>Share
            </button>
            <button type="button" class="btn btn-secondary w-100 w-sm-auto" id="shareModalCancel">
              <i class="bx bx-x me-1"></i>Cancel
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>

  <!-- Manage Access Modal - Responsive -->
  <div id="accessModal" class="modal fade" tabindex="-1" aria-labelledby="accessModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="accessModalLabel">
            <i class="bx bx-shield-quarter me-2"></i>Manage Access
          </h5>
          <button type="button" class="btn-close" aria-label="Close" id="accessModalClose"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <strong>Item:</strong> <span id="accessItemName" class="text-muted"></span>
          </div>
          <div class="list-group" id="sharedUsersList">
            <!-- Shared users/groups will be injected here -->
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary w-100 w-sm-auto" id="accessModalCancel">
            <i class="bx bx-x me-1"></i>Close
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- JavaScript - All functionality preserved -->
  <script>
    function updateAccessNote() {
      const accessSelect = document.getElementById('access');
      const accessNote = document.getElementById('access-note');
      const selectedValue = accessSelect.value;

      if (selectedValue === 'read') {
        accessNote.textContent = 'Can view and download.';
      } else if (selectedValue === 'NoDownload') {
        accessNote.textContent = 'Can view but cannot download.';
      }
    }

    document.addEventListener('DOMContentLoaded', updateAccessNote);
  </script>

  <!-- Share Modal Script -->
  <script>
    function toggleDropdown(id) {
      const el = document.getElementById(id);
      el.classList.toggle('show');
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
      const dropdown = document.getElementById('filterDropdown');
      const button = event.target.closest('.dropdown-toggle');
      if (!button && !dropdown.contains(event.target)) {
        dropdown.classList.remove('show');
      }
    });

    const shareModal = document.getElementById('shareModal');
    const shareModalClose = document.getElementById('shareModalClose');
    const shareModalCancel = document.getElementById('shareModalCancel');
    const shareItemIdInput = document.getElementById('shareItemId');
    const shareItemTypeInput = document.getElementById('shareItemType');
    const shareItemTypeText = document.getElementById('shareItemTypeText');
    const redirectUrlInput = document.getElementById('redirectUrlInput');

    document.querySelectorAll('.open-share-modal').forEach(btn => {
      btn.addEventListener('click', () => {
        const id = btn.getAttribute('data-id');
        const type = btn.getAttribute('data-type');
        const name = btn.getAttribute('data-name');

        shareItemIdInput.value = id;
        shareItemTypeInput.value = type;
        shareItemTypeText.textContent = type.charAt(0).toUpperCase() + type.slice(1) + ': ' + name;
        redirectUrlInput.value = window.location.pathname + window.location.search;

        const modal = new bootstrap.Modal(shareModal);
        modal.show();
      });
    });

    function closeModal() {
      const modal = bootstrap.Modal.getInstance(shareModal);
      if (modal) modal.hide();
    }

    shareModalClose.addEventListener('click', closeModal);
    shareModalCancel.addEventListener('click', closeModal);
  </script>

  <!-- Form Handling Script -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const shareForm = document.getElementById("shareForm");
      const userSelect = document.getElementById("shareWithUserId");
      const groupSelect = document.getElementById("shareWithGroupId");

      shareForm.addEventListener("submit", function(e) {
        const activeTab = document.querySelector(".nav-link.active").id;

        if (activeTab === "individual-tab") {
          groupSelect.disabled = true;
          userSelect.disabled = false;
        } else if (activeTab === "group-tab") {
          userSelect.disabled = true;
          groupSelect.disabled = false;
        }
      });

      [shareModalClose, shareModalCancel].forEach(btn => {
        btn.addEventListener("click", () => {
          userSelect.disabled = false;
          groupSelect.disabled = false;
        });
      });
    });
  </script>

  <!-- Upload Links Script -->
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const urlParams = new URLSearchParams(window.location.search);
      const path = urlParams.get("path") || "";
      document.getElementById("uploadFolder").href = `/Uploads?path=${encodeURIComponent(path)}`;
      document.getElementById("uploadFiles").href = `/Uploads?path=${encodeURIComponent(path)}`;
    });
  </script>
  <!-- access model -->
 <script>
  const accessModal = document.getElementById('accessModal');
  const accessModalClose = document.getElementById('accessModalClose');
  const accessModalCancel = document.getElementById('accessModalCancel');
  const accessItemName = document.getElementById('accessItemName');
  const sharedUsersList = document.getElementById('sharedUsersList');

  let toggleUserListVisible = false;

  function openStopShareModel(itemId, itemType, itemName) {
    accessItemName.textContent = `${itemType.charAt(0).toUpperCase() + itemType.slice(1)}: ${itemName}`;
    sharedUsersList.innerHTML = '<li class="list-group-item text-muted">Loading...</li>';

    fetch(`/shared-users/${itemType}/${itemId}`)
      .then(response => response.json())
      .then(data => {
        sharedUsersList.innerHTML = '';

        if (!data.success) {
          sharedUsersList.innerHTML = '<li class="list-group-item text-danger">No sharing records found.</li>';
          return;
        }

        // Shared with Everyone
        if (data.shareToAll) {
          const shareToAllLi = document.createElement('li');
          shareToAllLi.className = 'list-group-item d-flex justify-content-between align-items-center bg-light';
          shareToAllLi.innerHTML = `
            <span><strong>üì¢ Shared with Everyone</strong></span>
            <form method="POST" action="/stop-share" class="d-inline" onsubmit="return confirm('Are you sure you want to stop sharing with everyone?');">
              <input type="hidden" name="itemId" value="${itemId}">
              <input type="hidden" name="itemType" value="${itemType}">
              <input type="hidden" name="stopShareToAll" value="true">
              <input type="hidden" name="redirectUrl" value="${encodeURIComponent(window.location.pathname + window.location.search)}">
              <button type="submit" class="btn btn-sm btn-warning">Stop Share to All</button>
            </form>
          `;
          sharedUsersList.appendChild(shareToAllLi);
        }

        // Shared with specific users/groups
        if (Array.isArray(data.sharedWith) && data.sharedWith.length > 0) {
          // Controls (Select All, Deselect All, Stop Sharing Selected)
          const controlsLi = document.createElement('li');
          controlsLi.className = 'list-group-item d-flex justify-content-between align-items-center';
          controlsLi.innerHTML = `
            <div>
              <button type="button" class="btn btn-sm btn-secondary me-2" onclick="selectAllCheckboxes(true)">
                  <iconify-icon icon="fluent-mdl2:add-to" class="align-middle fs-18"></iconify-icon>
                Select All</button>
              <button type="button" class="btn btn-sm btn-secondary me-2" onclick="selectAllCheckboxes(false)">
                <iconify-icon icon="lsicon:minus-outline" class="align-middle fs-18"></iconify-icon>
                Deselect All</button>
              <button type="submit" class="btn btn-sm btn-danger" form="bulkStopShareForm" onclick="return confirm('Are you sure you want to stop sharing with selected users/groups?')">
                <iconify-icon icon="ant-design:stop-outlined" class="align-middle fs-18"></iconify-icon>
                Stop Sharing Selected  
              </button>
            </div>
          `;
          sharedUsersList.appendChild(controlsLi);

          // Show/Hide toggle button
          const toggleLi = document.createElement('li');
          toggleLi.className = 'list-group-item';
          toggleLi.innerHTML = `
            <button type="button" class="btn btn-sm btn-outline-primary" onclick="toggleUserList()">
               <iconify-icon icon="clarity:eye-show-line" class="align-middle fs-18"></iconify-icon>
             
              Show Users</button>
          `;
          sharedUsersList.appendChild(toggleLi);

          // User list wrapper (initially hidden)
          const userListWrapper = document.createElement('ul');
          userListWrapper.id = 'userListWrapper';
          userListWrapper.style.display = 'none';
          userListWrapper.className = 'list-group mt-2';

          // Create bulk stop share form
          const bulkForm = document.createElement('form');
          bulkForm.method = 'POST';
          bulkForm.action = '/stop-share';
          bulkForm.id = 'bulkStopShareForm';

          // Hidden inputs common to all checkboxes in this form
          bulkForm.appendChild(createHiddenInput('itemId', itemId));
          bulkForm.appendChild(createHiddenInput('itemType', itemType));
          bulkForm.appendChild(createHiddenInput('stopShareToAll', 'true'));
          bulkForm.appendChild(createHiddenInput('redirectUrl', encodeURIComponent(window.location.pathname + window.location.search)));

          // Add each user/group checkbox
          data.sharedWith.forEach(entry => {
            const li = document.createElement('li');
            li.className = 'list-group-item d-flex justify-content-between align-items-center';

            let label = '';
            let checkboxValue = '';

            if (entry.user) {
              label = `üë§ User: ${entry.user.name} (${entry.user.department || 'N/A'})`;
              checkboxValue = `user-${entry.user._id}`;
            } else if (entry.group) {
              label = `üë• Group: ${entry.group.groupName}`;
              checkboxValue = `group-${entry.group._id}`;
            }

            li.innerHTML = `
              <div class="form-check">
                <input class="form-check-input bulk-checkbox" type="checkbox" name="selected[]" value="${checkboxValue}" id="chk-${checkboxValue}">
                <label class="form-check-label" for="chk-${checkboxValue}">
                  ${label} ‚Äî <em class="text-muted">${entry.access}</em>
                </label>
              </div>
            `;

            bulkForm.appendChild(li);
          });

          userListWrapper.appendChild(bulkForm);
          sharedUsersList.appendChild(userListWrapper);
        }

        if ((!data.sharedWith || data.sharedWith.length === 0) && !data.shareToAll) {
          sharedUsersList.innerHTML = '<li class="list-group-item text-muted">No sharing records found.</li>';
        }
      })
      .catch(error => {
        console.error('Error fetching shared users:', error);
        sharedUsersList.innerHTML = '<li class="list-group-item text-danger">Failed to load shared data.</li>';
      });

    accessModal.style.display = 'block';
  }

  function createHiddenInput(name, value) {
    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = name;
    input.value = value;
    return input;
  }

  function toggleUserList() {
    const wrapper = document.getElementById('userListWrapper');
    const toggleBtn = sharedUsersList.querySelector('button.btn-outline-primary');
    toggleUserListVisible = !toggleUserListVisible;
    wrapper.style.display = toggleUserListVisible ? 'block' : 'none';
    toggleBtn.textContent = toggleUserListVisible ? 'Hide Users' : 'Show Users';
  }

  function selectAllCheckboxes(select) {
    const checkboxes = document.querySelectorAll('.bulk-checkbox');
    checkboxes.forEach(cb => cb.checked = select);
  }

  function closeAccessModal() {
    accessModal.style.display = 'none';
    toggleUserListVisible = false;
  }

  accessModalClose.addEventListener('click', closeAccessModal);
  accessModalCancel.addEventListener('click', closeAccessModal);

  window.addEventListener('click', (e) => {
    if (e.target === accessModal) {
      closeAccessModal();
    }
  });
</script>


  <!-- search functionlity  -->
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const searchInput = document.getElementById("search");
      const rows = document.querySelectorAll("tbody tr.file-row, tbody tr.folder-row");
      const noResultsRow = document.getElementById("noResultsRow");

      function filterRows() {
        const query = searchInput.value.trim().toLowerCase();
        let anyVisible = false;

        rows.forEach(row => {
          const text = row.innerText.toLowerCase();
          if (text.includes(query)) {
            row.style.display = "";
            anyVisible = true;
          } else {
            row.style.display = "none";
          }
        });

        // Show/hide "No Results" row
        if (!anyVisible) {
          noResultsRow.style.display = "table-row";
        } else {
          noResultsRow.style.display = "none";
        }
      }

      searchInput.addEventListener("input", filterRows);
      filterRows(); // Initial call to set correct state
    });
  </script>


  <%- include("./Layouts/footer") %>